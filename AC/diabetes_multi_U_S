# Import das bibliotecas necessárias
import time
from sklearn.decomposition import PCA
from imblearn.over_sampling import SMOTE
from sklearn.neural_network import MLPClassifier
import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
import seaborn as sns
from collections import Counter
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import plot_tree
from imblearn.under_sampling import RandomUnderSampler
from sklearn.neighbors import KNeighborsClassifier as KNN
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB
from sklearn.cluster import KMeans
from sklearn.metrics import accuracy_score, recall_score, precision_score, confusion_matrix, f1_score, classification_report

# Leitura do ficheiro csv com os dados
df = pd.read_csv ('diabetes_multi.csv', delimiter = ",")

# Verificar dados nulos (NÃO HÁ NENHUM DADO A FALTAR)
print("Dados em falta por coluna:")
print(df.isnull().sum(), "\n")

# Verificar duplicatas completas (linhas idênticas)
duplicatas = df[df.duplicated(keep=False)]  # `keep=False` marca todas as ocorrências
print(f"Número de linhas duplicadas: {len(duplicatas)}") 
# Agrupa linhas idênticas e conta ocorrências
contagem_duplicatas = df.groupby(df.columns.tolist()).size().reset_index(name='Contagem')
# Mostra as linhas repetidas
print(contagem_duplicatas.sort_values('Contagem', ascending=False))

# Remover duplicados
df = df.drop_duplicates()

# Seleção das colunas das características
X = df.drop("Diabetes_012", axis = 1)

# Seleção da coluna target
y = df.Diabetes_012

# Divisão em conjunto de treino e de teste
X_train, X_test, y_train, y_test = train_test_split (X, y, test_size = 0.25, random_state = 42)

# Escolher o novo tamanho alvo
tamanho_objetivo = 80000

# Aplica UNDERSAMPLING à classe 0
rus = RandomUnderSampler(sampling_strategy={0: tamanho_objetivo}, random_state=42)
X_rus, y_rus = rus.fit_resample(X_train, y_train)

# Aplica SMOTE a tudo o que saiu do RUS para aumentar as classes 1 e 2
smote = SMOTE(sampling_strategy={1: tamanho_objetivo, 2: tamanho_objetivo}, random_state=42)
X_train_bal, y_train_bal = smote.fit_resample(X_rus, y_rus)

# Juntar tudo num novo DataFrame
df_final = pd.concat([pd.DataFrame(X_train_bal, columns=X.columns),
                      pd.Series(y_train_bal, name="Diabetes_012")], axis=1)

sns.countplot(x = "Diabetes_012",data = df_final)
plt.title("Diabetes distribution(TRAIN)")
plt.show()

##---------- Neuronal Network ----------##
# Create a MLP classifier
mlp = MLPClassifier(hidden_layer_sizes = (10, 5), activation = 'relu', solver = 'adam', max_iter = 1000, tol = 0.0001,random_state = 42)

# Train the classifier
mlp.fit(X_train_bal, y_train_bal)
y_pred = mlp.predict(X_test)

# Evaluate the classifier
# Macro-Average (igual peso para todas classes)
macro_precision = precision_score(y_test, y_pred, average='macro')
macro_recall = recall_score(y_test, y_pred, average='macro')
macro_f1 = f1_score(y_test, y_pred, average='macro')

# Weighted-Average (ponderado pelo número de amostras)
weighted_precision = precision_score(y_test, y_pred, average='weighted')
weighted_recall = recall_score(y_test, y_pred, average='weighted')
weighted_f1 = f1_score(y_test, y_pred, average='weighted')

print(classification_report(y_test, y_pred))
print('Accuracy: %.2f' % accuracy_score(y_test, y_pred))
print(f"Macro Precision: {macro_precision:.4f}")
print(f"Macro Recall: {macro_recall:.4f}")
print(f"Macro F1-Score: {macro_f1:.4f}\n")
print(f"Weighted Precision: {weighted_precision:.4f}")
print(f"Weighted Recall: {weighted_recall:.4f}")
print(f"Weighted F1-Score: {weighted_f1:.4f}\n")

cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Não Diabetes', 'Diabetes Tipo 1', 'Diabetes Tipo 2'], yticklabels=['Não Diabetes', 'Diabetes Tipo 1', 'Diabetes Tipo 2'])
plt.xlabel('Predito')
plt.ylabel('Real')
plt.title('Matriz de Confusão')
plt.show()